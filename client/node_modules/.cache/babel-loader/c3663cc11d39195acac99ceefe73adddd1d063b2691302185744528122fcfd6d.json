{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\WhiteBoard\\\\client\\\\src\\\\components\\\\DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useImperativeHandle, forwardRef } from 'react';\nimport io from 'socket.io-client';\nimport UserCursors from './UserCursors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\nconst DrawingCanvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(function DrawingCanvas({\n  roomId,\n  color,\n  width,\n  onClear,\n  onUserCount\n}, ref) {\n  _s();\n  const canvasRef = useRef(null);\n  const [socket, setSocket] = useState(null);\n  const [drawing, setDrawing] = useState(false);\n  const [lastPoint, setLastPoint] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [cursors, setCursors] = useState({});\n  // Track lastPoint for each remote user\n  const remoteLastPoints = useRef({});\n  const cursorTimeouts = useRef({});\n  // Accumulate points for the current stroke\n  const currentStroke = useRef([]);\n  useImperativeHandle(ref, () => ({\n    leaveRoom: () => {\n      if (socket) socket.emit('leave-room');\n    },\n    clearCanvas: () => {\n      handleClear();\n    }\n  }), [socket]);\n  useEffect(() => {\n    const s = io(SOCKET_URL);\n    setSocket(s);\n    setUserId(s.id);\n    s.emit('join-room', {\n      roomId\n    });\n    s.on('init-drawing', drawingData => {\n      redrawFromData(drawingData);\n    });\n    s.on('draw-start', handleRemoteDrawStart);\n    s.on('draw-move', handleRemoteDrawMove);\n    s.on('draw-end', handleRemoteDrawEnd);\n    s.on('clear-canvas', clearCanvas);\n    s.on('cursor-move', handleRemoteCursorMove);\n    s.on('cursor-leave', handleRemoteCursorLeave);\n    s.on('user-count', count => {\n      if (onUserCount) onUserCount(count);\n    });\n    return () => {\n      s.emit('leave-room');\n      s.disconnect();\n    };\n    // eslint-disable-next-line\n  }, [roomId]);\n\n  // Drawing handlers\n  const startDraw = (x, y) => {\n    setDrawing(true);\n    setLastPoint({\n      x,\n      y\n    });\n    currentStroke.current = [{\n      x,\n      y\n    }];\n    if (socket) socket.emit('draw-start', {\n      x,\n      y,\n      color,\n      width\n    });\n  };\n  const draw = (x, y) => {\n    if (!drawing) return;\n    drawLine(lastPoint.x, lastPoint.y, x, y, color, width);\n    setLastPoint({\n      x,\n      y\n    });\n    currentStroke.current.push({\n      x,\n      y\n    });\n    if (socket) socket.emit('draw-move', {\n      x,\n      y,\n      color,\n      width\n    });\n  };\n  const endDraw = () => {\n    setDrawing(false);\n    setLastPoint(null);\n    if (currentStroke.current.length > 1 && socket) {\n      socket.emit('draw-end', {\n        color,\n        width,\n        points: currentStroke.current\n      });\n    } else if (socket) {\n      socket.emit('draw-end', {});\n    }\n    currentStroke.current = [];\n  };\n\n  // Mouse/touch events\n  const handlePointerDown = e => {\n    const {\n      x,\n      y\n    } = getCanvasCoords(e);\n    startDraw(x, y);\n    emitCursor(x, y);\n  };\n  const handlePointerMove = e => {\n    const {\n      x,\n      y\n    } = getCanvasCoords(e);\n    if (drawing) draw(x, y);\n    emitCursor(x, y);\n  };\n  const handlePointerUp = () => endDraw();\n\n  // Cursor emit\n  const emitCursor = (x, y) => {\n    if (socket) socket.emit('cursor-move', {\n      x,\n      y,\n      color\n    });\n  };\n\n  // Helpers\n  function getCanvasCoords(e) {\n    const rect = canvasRef.current.getBoundingClientRect();\n    const clientX = e.touches ? e.touches[0].clientX : e.clientX;\n    const clientY = e.touches ? e.touches[0].clientY : e.clientY;\n    return {\n      x: clientX - rect.left,\n      y: clientY - rect.top\n    };\n  }\n  function drawLine(x1, y1, x2, y2, color, width) {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  }\n  function clearCanvas() {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    remoteLastPoints.current = {};\n    setCursors({});\n    if (onClear) onClear();\n  }\n  function redrawFromData(drawingData) {\n    clearCanvas();\n    drawingData.forEach(cmd => {\n      if (cmd.type === 'clear') {\n        clearCanvas();\n      } else if (cmd.type === 'stroke' && cmd.data && Array.isArray(cmd.data.points)) {\n        drawStroke(cmd.data);\n      }\n    });\n  }\n  function drawStroke(stroke) {\n    const {\n      color,\n      width,\n      points\n    } = stroke;\n    if (!points || points.length < 2) return;\n    for (let i = 1; i < points.length; i++) {\n      drawLine(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y, color, width);\n    }\n  }\n\n  // Remote events (track per user)\n  function handleRemoteDrawStart({\n    userId,\n    x,\n    y,\n    color,\n    width\n  }) {\n    if (!userId) return;\n    remoteLastPoints.current[userId] = {\n      x,\n      y,\n      color,\n      width\n    };\n  }\n  function handleRemoteDrawMove({\n    userId,\n    x,\n    y,\n    color,\n    width\n  }) {\n    if (!userId) return;\n    const last = remoteLastPoints.current[userId];\n    if (last) {\n      drawLine(last.x, last.y, x, y, color, width);\n    }\n    remoteLastPoints.current[userId] = {\n      x,\n      y,\n      color,\n      width\n    };\n  }\n  function handleRemoteDrawEnd({\n    userId,\n    color,\n    width,\n    points\n  }) {\n    if (!userId) return;\n    delete remoteLastPoints.current[userId];\n    // Optionally, draw the full stroke if points are provided (for robustness)\n    if (points && points.length > 1) {\n      drawStroke({\n        color,\n        width,\n        points\n      });\n    }\n  }\n\n  // Remote cursor events\n  function handleRemoteCursorMove({\n    userId,\n    x,\n    y,\n    color\n  }) {\n    setCursors(prev => ({\n      ...prev,\n      [userId]: {\n        x,\n        y,\n        color\n      }\n    }));\n    // Hide cursor after 3s inactivity\n    if (cursorTimeouts.current[userId]) clearTimeout(cursorTimeouts.current[userId]);\n    cursorTimeouts.current[userId] = setTimeout(() => {\n      setCursors(prev => {\n        const copy = {\n          ...prev\n        };\n        delete copy[userId];\n        return copy;\n      });\n    }, 3000);\n  }\n  function handleRemoteCursorLeave({\n    userId\n  }) {\n    setCursors(prev => {\n      const copy = {\n        ...prev\n      };\n      delete copy[userId];\n      return copy;\n    });\n  }\n\n  // Clear button (removed, now handled by Toolbar)\n  const handleClear = () => {\n    if (socket) socket.emit('clear-canvas');\n    clearCanvas();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 600,\n      style: {\n        border: '1px solid #ccc',\n        background: '#fff',\n        touchAction: 'none'\n      },\n      onMouseDown: handlePointerDown,\n      onMouseMove: handlePointerMove,\n      onMouseUp: handlePointerUp,\n      onMouseLeave: handlePointerUp,\n      onTouchStart: handlePointerDown,\n      onTouchMove: handlePointerMove,\n      onTouchEnd: handlePointerUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserCursors, {\n      cursors: cursors,\n      ownUserId: userId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n}, \"kHTGmwFnRBOnm0gEhoSUCLql4VQ=\")), \"kHTGmwFnRBOnm0gEhoSUCLql4VQ=\");\n_c2 = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"DrawingCanvas$forwardRef\");\n$RefreshReg$(_c2, \"DrawingCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useImperativeHandle","forwardRef","io","UserCursors","jsxDEV","_jsxDEV","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","DrawingCanvas","_s","_c","roomId","color","width","onClear","onUserCount","ref","canvasRef","socket","setSocket","drawing","setDrawing","lastPoint","setLastPoint","userId","setUserId","cursors","setCursors","remoteLastPoints","cursorTimeouts","currentStroke","leaveRoom","emit","clearCanvas","handleClear","s","id","on","drawingData","redrawFromData","handleRemoteDrawStart","handleRemoteDrawMove","handleRemoteDrawEnd","handleRemoteCursorMove","handleRemoteCursorLeave","count","disconnect","startDraw","x","y","current","draw","drawLine","push","endDraw","length","points","handlePointerDown","e","getCanvasCoords","emitCursor","handlePointerMove","handlePointerUp","rect","getBoundingClientRect","clientX","touches","clientY","left","top","x1","y1","x2","y2","ctx","getContext","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","clearRect","height","forEach","cmd","type","data","Array","isArray","drawStroke","i","last","prev","clearTimeout","setTimeout","copy","style","position","children","border","background","touchAction","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","fileName","_jsxFileName","lineNumber","columnNumber","ownUserId","_c2","$RefreshReg$"],"sources":["D:/Coding/WhiteBoard/client/src/components/DrawingCanvas.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useImperativeHandle, forwardRef } from 'react';\nimport io from 'socket.io-client';\nimport UserCursors from './UserCursors';\n\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n\nconst DrawingCanvas = forwardRef(function DrawingCanvas({ roomId, color, width, onClear, onUserCount }, ref) {\n  const canvasRef = useRef(null);\n  const [socket, setSocket] = useState(null);\n  const [drawing, setDrawing] = useState(false);\n  const [lastPoint, setLastPoint] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [cursors, setCursors] = useState({});\n  // Track lastPoint for each remote user\n  const remoteLastPoints = useRef({});\n  const cursorTimeouts = useRef({});\n  // Accumulate points for the current stroke\n  const currentStroke = useRef([]);\n\n  useImperativeHandle(ref, () => ({\n    leaveRoom: () => {\n      if (socket) socket.emit('leave-room');\n    },\n    clearCanvas: () => {\n      handleClear();\n    }\n  }), [socket]);\n\n  useEffect(() => {\n    const s = io(SOCKET_URL);\n    setSocket(s);\n    setUserId(s.id);\n    s.emit('join-room', { roomId });\n    s.on('init-drawing', (drawingData) => {\n      redrawFromData(drawingData);\n    });\n    s.on('draw-start', handleRemoteDrawStart);\n    s.on('draw-move', handleRemoteDrawMove);\n    s.on('draw-end', handleRemoteDrawEnd);\n    s.on('clear-canvas', clearCanvas);\n    s.on('cursor-move', handleRemoteCursorMove);\n    s.on('cursor-leave', handleRemoteCursorLeave);\n    s.on('user-count', (count) => {\n      if (onUserCount) onUserCount(count);\n    });\n    return () => {\n      s.emit('leave-room');\n      s.disconnect();\n    };\n    // eslint-disable-next-line\n  }, [roomId]);\n\n  // Drawing handlers\n  const startDraw = (x, y) => {\n    setDrawing(true);\n    setLastPoint({ x, y });\n    currentStroke.current = [{ x, y }];\n    if (socket) socket.emit('draw-start', { x, y, color, width });\n  };\n  const draw = (x, y) => {\n    if (!drawing) return;\n    drawLine(lastPoint.x, lastPoint.y, x, y, color, width);\n    setLastPoint({ x, y });\n    currentStroke.current.push({ x, y });\n    if (socket) socket.emit('draw-move', { x, y, color, width });\n  };\n  const endDraw = () => {\n    setDrawing(false);\n    setLastPoint(null);\n    if (currentStroke.current.length > 1 && socket) {\n      socket.emit('draw-end', {\n        color,\n        width,\n        points: currentStroke.current\n      });\n    } else if (socket) {\n      socket.emit('draw-end', {});\n    }\n    currentStroke.current = [];\n  };\n\n  // Mouse/touch events\n  const handlePointerDown = (e) => {\n    const { x, y } = getCanvasCoords(e);\n    startDraw(x, y);\n    emitCursor(x, y);\n  };\n  const handlePointerMove = (e) => {\n    const { x, y } = getCanvasCoords(e);\n    if (drawing) draw(x, y);\n    emitCursor(x, y);\n  };\n  const handlePointerUp = () => endDraw();\n\n  // Cursor emit\n  const emitCursor = (x, y) => {\n    if (socket) socket.emit('cursor-move', { x, y, color });\n  };\n\n  // Helpers\n  function getCanvasCoords(e) {\n    const rect = canvasRef.current.getBoundingClientRect();\n    const clientX = e.touches ? e.touches[0].clientX : e.clientX;\n    const clientY = e.touches ? e.touches[0].clientY : e.clientY;\n    return {\n      x: clientX - rect.left,\n      y: clientY - rect.top\n    };\n  }\n  function drawLine(x1, y1, x2, y2, color, width) {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  }\n  function clearCanvas() {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    remoteLastPoints.current = {};\n    setCursors({});\n    if (onClear) onClear();\n  }\n  function redrawFromData(drawingData) {\n    clearCanvas();\n    drawingData.forEach(cmd => {\n      if (cmd.type === 'clear') {\n        clearCanvas();\n      } else if (cmd.type === 'stroke' && cmd.data && Array.isArray(cmd.data.points)) {\n        drawStroke(cmd.data);\n      }\n    });\n  }\n  function drawStroke(stroke) {\n    const { color, width, points } = stroke;\n    if (!points || points.length < 2) return;\n    for (let i = 1; i < points.length; i++) {\n      drawLine(points[i - 1].x, points[i - 1].y, points[i].x, points[i].y, color, width);\n    }\n  }\n\n  // Remote events (track per user)\n  function handleRemoteDrawStart({ userId, x, y, color, width }) {\n    if (!userId) return;\n    remoteLastPoints.current[userId] = { x, y, color, width };\n  }\n  function handleRemoteDrawMove({ userId, x, y, color, width }) {\n    if (!userId) return;\n    const last = remoteLastPoints.current[userId];\n    if (last) {\n      drawLine(last.x, last.y, x, y, color, width);\n    }\n    remoteLastPoints.current[userId] = { x, y, color, width };\n  }\n  function handleRemoteDrawEnd({ userId, color, width, points }) {\n    if (!userId) return;\n    delete remoteLastPoints.current[userId];\n    // Optionally, draw the full stroke if points are provided (for robustness)\n    if (points && points.length > 1) {\n      drawStroke({ color, width, points });\n    }\n  }\n\n  // Remote cursor events\n  function handleRemoteCursorMove({ userId, x, y, color }) {\n    setCursors(prev => ({ ...prev, [userId]: { x, y, color } }));\n    // Hide cursor after 3s inactivity\n    if (cursorTimeouts.current[userId]) clearTimeout(cursorTimeouts.current[userId]);\n    cursorTimeouts.current[userId] = setTimeout(() => {\n      setCursors(prev => {\n        const copy = { ...prev };\n        delete copy[userId];\n        return copy;\n      });\n    }, 3000);\n  }\n  function handleRemoteCursorLeave({ userId }) {\n    setCursors(prev => {\n      const copy = { ...prev };\n      delete copy[userId];\n      return copy;\n    });\n  }\n\n  // Clear button (removed, now handled by Toolbar)\n  const handleClear = () => {\n    if (socket) socket.emit('clear-canvas');\n    clearCanvas();\n  };\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <canvas\n        ref={canvasRef}\n        width={800}\n        height={600}\n        style={{ border: '1px solid #ccc', background: '#fff', touchAction: 'none' }}\n        onMouseDown={handlePointerDown}\n        onMouseMove={handlePointerMove}\n        onMouseUp={handlePointerUp}\n        onMouseLeave={handlePointerUp}\n        onTouchStart={handlePointerDown}\n        onTouchMove={handlePointerMove}\n        onTouchEnd={handlePointerUp}\n      />\n      <UserCursors cursors={cursors} ownUserId={userId} />\n    </div>\n  );\n});\n\nexport default DrawingCanvas; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}