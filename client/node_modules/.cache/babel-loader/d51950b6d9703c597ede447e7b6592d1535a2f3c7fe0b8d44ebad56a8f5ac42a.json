{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\WhiteBoard\\\\client\\\\src\\\\components\\\\DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\nfunction DrawingCanvas({\n  roomId,\n  color,\n  width,\n  onClear\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const [socket, setSocket] = useState(null);\n  const [drawing, setDrawing] = useState(false);\n  const [lastPoint, setLastPoint] = useState(null);\n\n  // Setup socket\n  useEffect(() => {\n    const s = io(SOCKET_URL);\n    setSocket(s);\n    s.emit('join-room', {\n      roomId\n    });\n    s.on('init-drawing', drawingData => {\n      redrawFromData(drawingData);\n    });\n    s.on('draw-start', handleRemoteDrawStart);\n    s.on('draw-move', handleRemoteDrawMove);\n    s.on('draw-end', handleRemoteDrawEnd);\n    s.on('clear-canvas', clearCanvas);\n    return () => s.disconnect();\n    // eslint-disable-next-line\n  }, [roomId]);\n\n  // Drawing handlers\n  const startDraw = (x, y) => {\n    setDrawing(true);\n    setLastPoint({\n      x,\n      y\n    });\n    if (socket) socket.emit('draw-start', {\n      x,\n      y,\n      color,\n      width\n    });\n  };\n  const draw = (x, y) => {\n    if (!drawing) return;\n    drawLine(lastPoint.x, lastPoint.y, x, y, color, width);\n    setLastPoint({\n      x,\n      y\n    });\n    if (socket) socket.emit('draw-move', {\n      x,\n      y,\n      color,\n      width\n    });\n  };\n  const endDraw = () => {\n    setDrawing(false);\n    setLastPoint(null);\n    if (socket) socket.emit('draw-end', {});\n  };\n\n  // Mouse/touch events\n  const handlePointerDown = e => {\n    const {\n      x,\n      y\n    } = getCanvasCoords(e);\n    startDraw(x, y);\n  };\n  const handlePointerMove = e => {\n    if (!drawing) return;\n    const {\n      x,\n      y\n    } = getCanvasCoords(e);\n    draw(x, y);\n  };\n  const handlePointerUp = () => endDraw();\n\n  // Helpers\n  function getCanvasCoords(e) {\n    const rect = canvasRef.current.getBoundingClientRect();\n    const clientX = e.touches ? e.touches[0].clientX : e.clientX;\n    const clientY = e.touches ? e.touches[0].clientY : e.clientY;\n    return {\n      x: clientX - rect.left,\n      y: clientY - rect.top\n    };\n  }\n  function drawLine(x1, y1, x2, y2, color, width) {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  }\n  function clearCanvas() {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    if (onClear) onClear();\n  }\n  function redrawFromData(drawingData) {\n    clearCanvas();\n    let last = null;\n    drawingData.forEach(cmd => {\n      if (cmd.type === 'clear') {\n        clearCanvas();\n        last = null;\n      } else if (cmd.type === 'stroke') {\n        const {\n          x,\n          y,\n          color,\n          width\n        } = cmd.data;\n        if (last) drawLine(last.x, last.y, x, y, color, width);\n        last = {\n          x,\n          y\n        };\n      }\n    });\n  }\n\n  // Remote events\n  function handleRemoteDrawStart({\n    x,\n    y,\n    color,\n    width\n  }) {\n    setLastPoint({\n      x,\n      y,\n      color,\n      width\n    });\n  }\n  function handleRemoteDrawMove({\n    x,\n    y,\n    color,\n    width\n  }) {\n    if (!lastPoint) return;\n    drawLine(lastPoint.x, lastPoint.y, x, y, color, width);\n    setLastPoint({\n      x,\n      y,\n      color,\n      width\n    });\n  }\n  function handleRemoteDrawEnd() {\n    setLastPoint(null);\n  }\n\n  // Clear button\n  const handleClear = () => {\n    if (socket) socket.emit('clear-canvas');\n    clearCanvas();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 600,\n      style: {\n        border: '1px solid #ccc',\n        background: '#fff',\n        touchAction: 'none'\n      },\n      onMouseDown: handlePointerDown,\n      onMouseMove: handlePointerMove,\n      onMouseUp: handlePointerUp,\n      onMouseLeave: handlePointerUp,\n      onTouchStart: handlePointerDown,\n      onTouchMove: handlePointerMove,\n      onTouchEnd: handlePointerUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClear,\n      style: {\n        position: 'absolute',\n        top: 10,\n        right: 10\n      },\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(DrawingCanvas, \"XBAb79HLxo1gye4Ue4B+jm7SdNM=\");\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","io","jsxDEV","_jsxDEV","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","DrawingCanvas","roomId","color","width","onClear","_s","canvasRef","socket","setSocket","drawing","setDrawing","lastPoint","setLastPoint","s","emit","on","drawingData","redrawFromData","handleRemoteDrawStart","handleRemoteDrawMove","handleRemoteDrawEnd","clearCanvas","disconnect","startDraw","x","y","draw","drawLine","endDraw","handlePointerDown","e","getCanvasCoords","handlePointerMove","handlePointerUp","rect","current","getBoundingClientRect","clientX","touches","clientY","left","top","x1","y1","x2","y2","ctx","getContext","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","clearRect","height","last","forEach","cmd","type","data","handleClear","style","position","children","ref","border","background","touchAction","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","fileName","_jsxFileName","lineNumber","columnNumber","onClick","right","_c","$RefreshReg$"],"sources":["D:/Coding/WhiteBoard/client/src/components/DrawingCanvas.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\n\r\nfunction DrawingCanvas({ roomId, color, width, onClear }) {\r\n  const canvasRef = useRef(null);\r\n  const [socket, setSocket] = useState(null);\r\n  const [drawing, setDrawing] = useState(false);\r\n  const [lastPoint, setLastPoint] = useState(null);\r\n\r\n  // Setup socket\r\n  useEffect(() => {\r\n    const s = io(SOCKET_URL);\r\n    setSocket(s);\r\n    s.emit('join-room', { roomId });\r\n    s.on('init-drawing', (drawingData) => {\r\n      redrawFromData(drawingData);\r\n    });\r\n    s.on('draw-start', handleRemoteDrawStart);\r\n    s.on('draw-move', handleRemoteDrawMove);\r\n    s.on('draw-end', handleRemoteDrawEnd);\r\n    s.on('clear-canvas', clearCanvas);\r\n    return () => s.disconnect();\r\n    // eslint-disable-next-line\r\n  }, [roomId]);\r\n\r\n  // Drawing handlers\r\n  const startDraw = (x, y) => {\r\n    setDrawing(true);\r\n    setLastPoint({ x, y });\r\n    if (socket) socket.emit('draw-start', { x, y, color, width });\r\n  };\r\n  const draw = (x, y) => {\r\n    if (!drawing) return;\r\n    drawLine(lastPoint.x, lastPoint.y, x, y, color, width);\r\n    setLastPoint({ x, y });\r\n    if (socket) socket.emit('draw-move', { x, y, color, width });\r\n  };\r\n  const endDraw = () => {\r\n    setDrawing(false);\r\n    setLastPoint(null);\r\n    if (socket) socket.emit('draw-end', {});\r\n  };\r\n\r\n  // Mouse/touch events\r\n  const handlePointerDown = (e) => {\r\n    const { x, y } = getCanvasCoords(e);\r\n    startDraw(x, y);\r\n  };\r\n  const handlePointerMove = (e) => {\r\n    if (!drawing) return;\r\n    const { x, y } = getCanvasCoords(e);\r\n    draw(x, y);\r\n  };\r\n  const handlePointerUp = () => endDraw();\r\n\r\n  // Helpers\r\n  function getCanvasCoords(e) {\r\n    const rect = canvasRef.current.getBoundingClientRect();\r\n    const clientX = e.touches ? e.touches[0].clientX : e.clientX;\r\n    const clientY = e.touches ? e.touches[0].clientY : e.clientY;\r\n    return {\r\n      x: clientX - rect.left,\r\n      y: clientY - rect.top\r\n    };\r\n  }\r\n  function drawLine(x1, y1, x2, y2, color, width) {\r\n    const ctx = canvasRef.current.getContext('2d');\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = width;\r\n    ctx.lineCap = 'round';\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n  }\r\n  function clearCanvas() {\r\n    const ctx = canvasRef.current.getContext('2d');\r\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n    if (onClear) onClear();\r\n  }\r\n  function redrawFromData(drawingData) {\r\n    clearCanvas();\r\n    let last = null;\r\n    drawingData.forEach(cmd => {\r\n      if (cmd.type === 'clear') {\r\n        clearCanvas();\r\n        last = null;\r\n      } else if (cmd.type === 'stroke') {\r\n        const { x, y, color, width } = cmd.data;\r\n        if (last) drawLine(last.x, last.y, x, y, color, width);\r\n        last = { x, y };\r\n      }\r\n    });\r\n  }\r\n\r\n  // Remote events\r\n  function handleRemoteDrawStart({ x, y, color, width }) {\r\n    setLastPoint({ x, y, color, width });\r\n  }\r\n  function handleRemoteDrawMove({ x, y, color, width }) {\r\n    if (!lastPoint) return;\r\n    drawLine(lastPoint.x, lastPoint.y, x, y, color, width);\r\n    setLastPoint({ x, y, color, width });\r\n  }\r\n  function handleRemoteDrawEnd() {\r\n    setLastPoint(null);\r\n  }\r\n\r\n  // Clear button\r\n  const handleClear = () => {\r\n    if (socket) socket.emit('clear-canvas');\r\n    clearCanvas();\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={800}\r\n        height={600}\r\n        style={{ border: '1px solid #ccc', background: '#fff', touchAction: 'none' }}\r\n        onMouseDown={handlePointerDown}\r\n        onMouseMove={handlePointerMove}\r\n        onMouseUp={handlePointerUp}\r\n        onMouseLeave={handlePointerUp}\r\n        onTouchStart={handlePointerDown}\r\n        onTouchMove={handlePointerMove}\r\n        onTouchEnd={handlePointerUp}\r\n      />\r\n      <button onClick={handleClear} style={{ position: 'absolute', top: 10, right: 10 }}>Clear</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DrawingCanvas; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}