{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\WhiteBoard\\\\client\\\\src\\\\components\\\\DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useImperativeHandle, forwardRef } from 'react';\nimport io from 'socket.io-client';\nimport UserCursors from './UserCursors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\nconst DrawingCanvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(function DrawingCanvas({\n  roomId,\n  color,\n  width,\n  onClear,\n  onUserCount\n}, ref) {\n  _s();\n  const canvasRef = useRef(null);\n  const [socket, setSocket] = useState(null);\n  const [drawing, setDrawing] = useState(false);\n  const [lastPoint, setLastPoint] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [cursors, setCursors] = useState({});\n  // Track lastPoint for each remote user\n  const remoteLastPoints = useRef({});\n  const cursorTimeouts = useRef({});\n\n  // Expose leaveRoom and clearCanvas methods to parent\n  useImperativeHandle(ref, () => ({\n    leaveRoom: () => {\n      if (socket) socket.emit('leave-room');\n    },\n    clearCanvas: () => {\n      if (socket) socket.emit('clear-canvas');\n      clearCanvas();\n    }\n  }), [socket]);\n\n  // Setup socket\n  useEffect(() => {\n    const s = io(SOCKET_URL);\n    setSocket(s);\n    setUserId(s.id);\n    s.emit('join-room', {\n      roomId\n    });\n    s.on('init-drawing', drawingData => {\n      redrawFromData(drawingData);\n    });\n    s.on('draw-start', handleRemoteDrawStart);\n    s.on('draw-move', handleRemoteDrawMove);\n    s.on('draw-end', handleRemoteDrawEnd);\n    s.on('clear-canvas', clearCanvas);\n    s.on('cursor-move', handleRemoteCursorMove);\n    s.on('cursor-leave', handleRemoteCursorLeave);\n    s.on('user-count', count => {\n      if (onUserCount) onUserCount(count);\n    });\n    return () => {\n      s.emit('leave-room');\n      s.disconnect();\n    };\n    // eslint-disable-next-line\n  }, [roomId]);\n\n  // Drawing handlers\n  const startDraw = (x, y) => {\n    setDrawing(true);\n    setLastPoint({\n      x,\n      y\n    });\n    if (socket) socket.emit('draw-start', {\n      x,\n      y,\n      color,\n      width\n    });\n  };\n  const draw = (x, y) => {\n    if (!drawing) return;\n    drawLine(lastPoint.x, lastPoint.y, x, y, color, width);\n    setLastPoint({\n      x,\n      y\n    });\n    if (socket) socket.emit('draw-move', {\n      x,\n      y,\n      color,\n      width\n    });\n  };\n  const endDraw = () => {\n    setDrawing(false);\n    setLastPoint(null);\n    if (socket) socket.emit('draw-end', {});\n  };\n\n  // Mouse/touch events\n  const handlePointerDown = e => {\n    const {\n      x,\n      y\n    } = getCanvasCoords(e);\n    startDraw(x, y);\n    emitCursor(x, y);\n  };\n  const handlePointerMove = e => {\n    const {\n      x,\n      y\n    } = getCanvasCoords(e);\n    if (drawing) draw(x, y);\n    emitCursor(x, y);\n  };\n  const handlePointerUp = () => endDraw();\n\n  // Cursor emit\n  const emitCursor = (x, y) => {\n    if (socket) socket.emit('cursor-move', {\n      x,\n      y,\n      color\n    });\n  };\n\n  // Helpers\n  function getCanvasCoords(e) {\n    const rect = canvasRef.current.getBoundingClientRect();\n    const clientX = e.touches ? e.touches[0].clientX : e.clientX;\n    const clientY = e.touches ? e.touches[0].clientY : e.clientY;\n    return {\n      x: clientX - rect.left,\n      y: clientY - rect.top\n    };\n  }\n  function drawLine(x1, y1, x2, y2, color, width) {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  }\n  function clearCanvas() {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    remoteLastPoints.current = {};\n    setCursors({});\n    if (onClear) onClear();\n  }\n  function redrawFromData(drawingData) {\n    clearCanvas();\n    let last = null;\n    drawingData.forEach(cmd => {\n      if (cmd.type === 'clear') {\n        clearCanvas();\n        last = null;\n      } else if (cmd.type === 'stroke') {\n        const {\n          x,\n          y,\n          color,\n          width\n        } = cmd.data;\n        if (last) drawLine(last.x, last.y, x, y, color, width);\n        last = {\n          x,\n          y\n        };\n      }\n    });\n  }\n\n  // Remote events (track per user)\n  function handleRemoteDrawStart({\n    userId,\n    x,\n    y,\n    color,\n    width\n  }) {\n    if (!userId) return;\n    remoteLastPoints.current[userId] = {\n      x,\n      y,\n      color,\n      width\n    };\n  }\n  function handleRemoteDrawMove({\n    userId,\n    x,\n    y,\n    color,\n    width\n  }) {\n    if (!userId) return;\n    const last = remoteLastPoints.current[userId];\n    if (last) {\n      drawLine(last.x, last.y, x, y, color, width);\n    }\n    remoteLastPoints.current[userId] = {\n      x,\n      y,\n      color,\n      width\n    };\n  }\n  function handleRemoteDrawEnd({\n    userId\n  }) {\n    if (!userId) return;\n    delete remoteLastPoints.current[userId];\n  }\n\n  // Remote cursor events\n  function handleRemoteCursorMove({\n    userId,\n    x,\n    y,\n    color\n  }) {\n    setCursors(prev => ({\n      ...prev,\n      [userId]: {\n        x,\n        y,\n        color\n      }\n    }));\n    // Hide cursor after 3s inactivity\n    if (cursorTimeouts.current[userId]) clearTimeout(cursorTimeouts.current[userId]);\n    cursorTimeouts.current[userId] = setTimeout(() => {\n      setCursors(prev => {\n        const copy = {\n          ...prev\n        };\n        delete copy[userId];\n        return copy;\n      });\n    }, 3000);\n  }\n  function handleRemoteCursorLeave({\n    userId\n  }) {\n    setCursors(prev => {\n      const copy = {\n        ...prev\n      };\n      delete copy[userId];\n      return copy;\n    });\n  }\n\n  // Clear button\n  const handleClear = () => {\n    if (socket) socket.emit('clear-canvas');\n    clearCanvas();\n  };\n\n  // Remove the clear button from the canvas area\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 600,\n      style: {\n        border: '1px solid #ccc',\n        background: '#fff',\n        touchAction: 'none'\n      },\n      onMouseDown: handlePointerDown,\n      onMouseMove: handlePointerMove,\n      onMouseUp: handlePointerUp,\n      onMouseLeave: handlePointerUp,\n      onTouchStart: handlePointerDown,\n      onTouchMove: handlePointerMove,\n      onTouchEnd: handlePointerUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserCursors, {\n      cursors: cursors,\n      ownUserId: userId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n}, \"fD0OCPG6MICX+COch8y1scp6hJc=\")), \"fD0OCPG6MICX+COch8y1scp6hJc=\");\n_c2 = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"DrawingCanvas$forwardRef\");\n$RefreshReg$(_c2, \"DrawingCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useImperativeHandle","forwardRef","io","UserCursors","jsxDEV","_jsxDEV","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","DrawingCanvas","_s","_c","roomId","color","width","onClear","onUserCount","ref","canvasRef","socket","setSocket","drawing","setDrawing","lastPoint","setLastPoint","userId","setUserId","cursors","setCursors","remoteLastPoints","cursorTimeouts","leaveRoom","emit","clearCanvas","s","id","on","drawingData","redrawFromData","handleRemoteDrawStart","handleRemoteDrawMove","handleRemoteDrawEnd","handleRemoteCursorMove","handleRemoteCursorLeave","count","disconnect","startDraw","x","y","draw","drawLine","endDraw","handlePointerDown","e","getCanvasCoords","emitCursor","handlePointerMove","handlePointerUp","rect","current","getBoundingClientRect","clientX","touches","clientY","left","top","x1","y1","x2","y2","ctx","getContext","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","clearRect","height","last","forEach","cmd","type","data","prev","clearTimeout","setTimeout","copy","handleClear","style","position","children","border","background","touchAction","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","fileName","_jsxFileName","lineNumber","columnNumber","ownUserId","_c2","$RefreshReg$"],"sources":["D:/Coding/WhiteBoard/client/src/components/DrawingCanvas.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useImperativeHandle, forwardRef } from 'react';\r\nimport io from 'socket.io-client';\r\nimport UserCursors from './UserCursors';\r\n\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\n\r\nconst DrawingCanvas = forwardRef(function DrawingCanvas({ roomId, color, width, onClear, onUserCount }, ref) {\r\n  const canvasRef = useRef(null);\r\n  const [socket, setSocket] = useState(null);\r\n  const [drawing, setDrawing] = useState(false);\r\n  const [lastPoint, setLastPoint] = useState(null);\r\n  const [userId, setUserId] = useState(null);\r\n  const [cursors, setCursors] = useState({});\r\n  // Track lastPoint for each remote user\r\n  const remoteLastPoints = useRef({});\r\n  const cursorTimeouts = useRef({});\r\n\r\n  // Expose leaveRoom and clearCanvas methods to parent\r\n  useImperativeHandle(ref, () => ({\r\n    leaveRoom: () => {\r\n      if (socket) socket.emit('leave-room');\r\n    },\r\n    clearCanvas: () => {\r\n      if (socket) socket.emit('clear-canvas');\r\n      clearCanvas();\r\n    }\r\n  }), [socket]);\r\n\r\n  // Setup socket\r\n  useEffect(() => {\r\n    const s = io(SOCKET_URL);\r\n    setSocket(s);\r\n    setUserId(s.id);\r\n    s.emit('join-room', { roomId });\r\n    s.on('init-drawing', (drawingData) => {\r\n      redrawFromData(drawingData);\r\n    });\r\n    s.on('draw-start', handleRemoteDrawStart);\r\n    s.on('draw-move', handleRemoteDrawMove);\r\n    s.on('draw-end', handleRemoteDrawEnd);\r\n    s.on('clear-canvas', clearCanvas);\r\n    s.on('cursor-move', handleRemoteCursorMove);\r\n    s.on('cursor-leave', handleRemoteCursorLeave);\r\n    s.on('user-count', (count) => {\r\n      if (onUserCount) onUserCount(count);\r\n    });\r\n    return () => {\r\n      s.emit('leave-room');\r\n      s.disconnect();\r\n    };\r\n    // eslint-disable-next-line\r\n  }, [roomId]);\r\n\r\n  // Drawing handlers\r\n  const startDraw = (x, y) => {\r\n    setDrawing(true);\r\n    setLastPoint({ x, y });\r\n    if (socket) socket.emit('draw-start', { x, y, color, width });\r\n  };\r\n  const draw = (x, y) => {\r\n    if (!drawing) return;\r\n    drawLine(lastPoint.x, lastPoint.y, x, y, color, width);\r\n    setLastPoint({ x, y });\r\n    if (socket) socket.emit('draw-move', { x, y, color, width });\r\n  };\r\n  const endDraw = () => {\r\n    setDrawing(false);\r\n    setLastPoint(null);\r\n    if (socket) socket.emit('draw-end', {});\r\n  };\r\n\r\n  // Mouse/touch events\r\n  const handlePointerDown = (e) => {\r\n    const { x, y } = getCanvasCoords(e);\r\n    startDraw(x, y);\r\n    emitCursor(x, y);\r\n  };\r\n  const handlePointerMove = (e) => {\r\n    const { x, y } = getCanvasCoords(e);\r\n    if (drawing) draw(x, y);\r\n    emitCursor(x, y);\r\n  };\r\n  const handlePointerUp = () => endDraw();\r\n\r\n  // Cursor emit\r\n  const emitCursor = (x, y) => {\r\n    if (socket) socket.emit('cursor-move', { x, y, color });\r\n  };\r\n\r\n  // Helpers\r\n  function getCanvasCoords(e) {\r\n    const rect = canvasRef.current.getBoundingClientRect();\r\n    const clientX = e.touches ? e.touches[0].clientX : e.clientX;\r\n    const clientY = e.touches ? e.touches[0].clientY : e.clientY;\r\n    return {\r\n      x: clientX - rect.left,\r\n      y: clientY - rect.top\r\n    };\r\n  }\r\n  function drawLine(x1, y1, x2, y2, color, width) {\r\n    const ctx = canvasRef.current.getContext('2d');\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = width;\r\n    ctx.lineCap = 'round';\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n  }\r\n  function clearCanvas() {\r\n    const ctx = canvasRef.current.getContext('2d');\r\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n    remoteLastPoints.current = {};\r\n    setCursors({});\r\n    if (onClear) onClear();\r\n  }\r\n  function redrawFromData(drawingData) {\r\n    clearCanvas();\r\n    let last = null;\r\n    drawingData.forEach(cmd => {\r\n      if (cmd.type === 'clear') {\r\n        clearCanvas();\r\n        last = null;\r\n      } else if (cmd.type === 'stroke') {\r\n        const { x, y, color, width } = cmd.data;\r\n        if (last) drawLine(last.x, last.y, x, y, color, width);\r\n        last = { x, y };\r\n      }\r\n    });\r\n  }\r\n\r\n  // Remote events (track per user)\r\n  function handleRemoteDrawStart({ userId, x, y, color, width }) {\r\n    if (!userId) return;\r\n    remoteLastPoints.current[userId] = { x, y, color, width };\r\n  }\r\n  function handleRemoteDrawMove({ userId, x, y, color, width }) {\r\n    if (!userId) return;\r\n    const last = remoteLastPoints.current[userId];\r\n    if (last) {\r\n      drawLine(last.x, last.y, x, y, color, width);\r\n    }\r\n    remoteLastPoints.current[userId] = { x, y, color, width };\r\n  }\r\n  function handleRemoteDrawEnd({ userId }) {\r\n    if (!userId) return;\r\n    delete remoteLastPoints.current[userId];\r\n  }\r\n\r\n  // Remote cursor events\r\n  function handleRemoteCursorMove({ userId, x, y, color }) {\r\n    setCursors(prev => ({ ...prev, [userId]: { x, y, color } }));\r\n    // Hide cursor after 3s inactivity\r\n    if (cursorTimeouts.current[userId]) clearTimeout(cursorTimeouts.current[userId]);\r\n    cursorTimeouts.current[userId] = setTimeout(() => {\r\n      setCursors(prev => {\r\n        const copy = { ...prev };\r\n        delete copy[userId];\r\n        return copy;\r\n      });\r\n    }, 3000);\r\n  }\r\n  function handleRemoteCursorLeave({ userId }) {\r\n    setCursors(prev => {\r\n      const copy = { ...prev };\r\n      delete copy[userId];\r\n      return copy;\r\n    });\r\n  }\r\n\r\n  // Clear button\r\n  const handleClear = () => {\r\n    if (socket) socket.emit('clear-canvas');\r\n    clearCanvas();\r\n  };\r\n\r\n  // Remove the clear button from the canvas area\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={800}\r\n        height={600}\r\n        style={{ border: '1px solid #ccc', background: '#fff', touchAction: 'none' }}\r\n        onMouseDown={handlePointerDown}\r\n        onMouseMove={handlePointerMove}\r\n        onMouseUp={handlePointerUp}\r\n        onMouseLeave={handlePointerUp}\r\n        onTouchStart={handlePointerDown}\r\n        onTouchMove={handlePointerMove}\r\n        onTouchEnd={handlePointerUp}\r\n      />\r\n      <UserCursors cursors={cursors} ownUserId={userId} />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default DrawingCanvas; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}